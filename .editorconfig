###############################
# Core EditorConfig Options   #
###############################
# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true
# All files
[*]
indent_style = space

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom
###############################
# .NET Coding Conventions     #
###############################
[*.{cs,vb}]
# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false
file_header_template = unset

# this. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:omit_if_default

# === Expression-level preferences==
# This feature does not work well with SerializeField attribute
dotnet_style_readonly_field = false:none
# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:warning
# Unity has some issues with this feature (Unity objects)
dotnet_style_null_propagation = false:silent
# Unity has some issues with this feature (Unity objects)
dotnet_style_coalesce_expression = false:silent
# Unity objects don't support null checking so best to use ReferenceEquals(value, null)
dotnet_style_prefer_is_null_check_over_reference_equality_method = false:silent
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:none
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
#Other
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_collection_expression = when_types_loosely_match
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true

# Parameter preferences
dotnet_code_quality_unused_parameters = all:silent

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

###############################
# Naming Conventions          #
###############################
# Shared styles
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Interfaces should begin with I
dotnet_naming_rule.interface_should_begin_with_i.symbols = interface
dotnet_naming_rule.interface_should_begin_with_i.style = begins_with_i
dotnet_naming_rule.interface_should_begin_with_i.severity = error

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.capitalization = pascal_case

# Abstract classes should begin with A
dotnet_naming_rule.abstract_classes_should_begin_with_a.symbols = abstract_class
dotnet_naming_rule.abstract_classes_should_begin_with_a.style = begins_with_a
dotnet_naming_rule.abstract_classes_should_begin_with_a.severity = error

dotnet_naming_symbols.abstract_class.applicable_kinds = class
dotnet_naming_symbols.abstract_class.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.abstract_class.required_modifiers = abstract

dotnet_naming_style.begins_with_a.required_prefix = A
dotnet_naming_style.begins_with_a.capitalization = pascal_case

# Types should be PascalCase
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.types_should_be_pascal_case.severity = error

dotnet_naming_symbols.types.applicable_kinds = namespace, class, struct, delegate
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal

# Public members should be PascalCase
dotnet_naming_rule.types_should_be_pascal_case.symbols = public_members
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.types_should_be_pascal_case.severity = error

dotnet_naming_symbols.public_members.applicable_kinds = method, field, property, event
dotnet_naming_symbols.public_members.applicable_accessibilities = public, internal, protected, protected_internal

# Private static member fields are camelCase and start with s_
dotnet_naming_rule.static_fields.symbols = static_fields
dotnet_naming_rule.static_fields.style = static_fields_style
dotnet_naming_rule.static_fields.severity = error

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.applicable_accessibilities = private
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_fields_style.capitalization = camel_case
dotnet_naming_style.static_fields_style.required_prefix = s_

# Const fields are PascalCase and no prefix
dotnet_naming_rule.member_const_fields.symbols = member_const_fields
dotnet_naming_rule.member_const_fields.style = pascal_case_style
dotnet_naming_rule.member_const_fields.severity = error

dotnet_naming_symbols.member_const_fields.applicable_kinds = field, local
dotnet_naming_symbols.member_const_fields.applicable_accessibilities = *
dotnet_naming_symbols.member_const_fields.required_modifiers = const

# Static readonly fields are PascalCase and no prefix also (like consts)
dotnet_naming_rule.static_readonly_fields.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields.style = pascal_case_style
dotnet_naming_rule.static_readonly_fields.severity = error

dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities = *
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# Private static readonly fields are PascalCase (this group is needed to distinguish shis set from static fields)
dotnet_naming_rule.private_readonly_static_fields.symbols = private_readonly_static_fields
dotnet_naming_rule.private_readonly_static_fields.style = pascal_case_style
dotnet_naming_rule.private_readonly_static_fields.severity = error

dotnet_naming_symbols.private_readonly_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_readonly_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_readonly_static_fields.required_modifiers = static, readonly

# Private member fields are camelCase and start with _
dotnet_naming_rule.member_fields.symbols = member_fields
dotnet_naming_rule.member_fields.style = member_field_style
dotnet_naming_rule.member_fields.severity = error

dotnet_naming_symbols.member_fields.applicable_kinds = field
dotnet_naming_symbols.member_fields.applicable_accessibilities = private, protected
dotnet_naming_symbols.member_fields.required_modifiers = private

dotnet_naming_style.member_field_style.capitalization = camel_case
dotnet_naming_style.member_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
dotnet_naming_rule.locals_should_be_camel_case.severity = error

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local
dotnet_naming_symbols.locals_and_parameters.applicable_accessibilities = *

# All methods should have PascalCase style
dotnet_naming_rule.all_methods_should_be_pascal_case.symbols = all_methods
dotnet_naming_rule.all_methods_should_be_pascal_case.style = all_methods_style
dotnet_naming_rule.all_methods_should_be_pascal_case.severity = error

dotnet_naming_symbols.all_methods.applicable_kinds = method
dotnet_naming_symbols.all_methods.applicable_accessibilities = *

dotnet_naming_style.all_methods_style.capitalization = pascal_case

# Async methods should have "Async" suffix
dotnet_naming_rule.async_methods_end_with_async.symbols = any_async_methods
dotnet_naming_rule.async_methods_end_with_async.style = end_with_async
dotnet_naming_rule.async_methods_end_with_async.severity = suggestion

dotnet_naming_symbols.any_async_methods.applicable_kinds = method
dotnet_naming_symbols.any_async_methods.applicable_accessibilities = *
dotnet_naming_symbols.any_async_methods.required_modifiers = async

dotnet_naming_style.end_with_async.required_suffix = Async

###############################
# C# Coding Conventions       #
###############################
[*.cs]
# var preferences
csharp_style_var_elsewhere = false
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = false

# Expression-bodied members
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_properties = true

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_extended_property_pattern = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_switch_expression = true

# Null-checking preferences
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async:suggestion
csharp_style_prefer_readonly_struct = true
csharp_style_prefer_readonly_struct_member = true

# Expression-level preferences
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_null_check_over_type_check = true
csharp_style_prefer_range_operator = true
csharp_style_prefer_tuple_swap = true
csharp_style_prefer_utf8_string_literals = true
csharp_style_throw_expression = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# Code-block preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = true
csharp_style_namespace_declarations = block_scoped
csharp_style_prefer_method_group_conversion = true
csharp_style_prefer_primary_constructors = true
csharp_style_prefer_top_level_statements = true

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_declaration_statements = false
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true


# Rules are not applied in the following folders
[Assets/Plugins/**.cs]
generated_code = true

[Assets/TextMesh Pro/**.cs]
generated_code = true